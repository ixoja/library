// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UpdateBookHandlerFunc turns a function with the right signature into a update book handler
type UpdateBookHandlerFunc func(UpdateBookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateBookHandlerFunc) Handle(params UpdateBookParams) middleware.Responder {
	return fn(params)
}

// UpdateBookHandler interface for that can handle valid update book params
type UpdateBookHandler interface {
	Handle(UpdateBookParams) middleware.Responder
}

// NewUpdateBook creates a new http.Handler for the update book operation
func NewUpdateBook(ctx *middleware.Context, handler UpdateBookHandler) *UpdateBook {
	return &UpdateBook{Context: ctx, Handler: handler}
}

/*UpdateBook swagger:route PATCH /books/{id} updateBook

Update book record.

*/
type UpdateBook struct {
	Context *middleware.Context
	Handler UpdateBookHandler
}

func (o *UpdateBook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateBookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateBookBody update book body
// swagger:model UpdateBookBody
type UpdateBookBody struct {

	// rating
	// Maximum: 3
	// Minimum: 1
	Rating int64 `json:"rating,omitempty"`

	// status
	// Enum: [checked_in checked_out]
	Status string `json:"status,omitempty"`
}

// Validate validates this update book body
func (o *UpdateBookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBookBody) validateRating(formats strfmt.Registry) error {

	if swag.IsZero(o.Rating) { // not required
		return nil
	}

	if err := validate.MinimumInt("bookUpdate"+"."+"rating", "body", int64(o.Rating), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bookUpdate"+"."+"rating", "body", int64(o.Rating), 3, false); err != nil {
		return err
	}

	return nil
}

var updateBookBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["checked_in","checked_out"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateBookBodyTypeStatusPropEnum = append(updateBookBodyTypeStatusPropEnum, v)
	}
}

const (

	// UpdateBookBodyStatusCheckedIn captures enum value "checked_in"
	UpdateBookBodyStatusCheckedIn string = "checked_in"

	// UpdateBookBodyStatusCheckedOut captures enum value "checked_out"
	UpdateBookBodyStatusCheckedOut string = "checked_out"
)

// prop value enum
func (o *UpdateBookBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateBookBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdateBookBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("bookUpdate"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBookBody) UnmarshalBinary(b []byte) error {
	var res UpdateBookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
