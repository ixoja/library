// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// PatchBooksIDHandlerFunc turns a function with the right signature into a patch books ID handler
type PatchBooksIDHandlerFunc func(PatchBooksIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchBooksIDHandlerFunc) Handle(params PatchBooksIDParams) middleware.Responder {
	return fn(params)
}

// PatchBooksIDHandler interface for that can handle valid patch books ID params
type PatchBooksIDHandler interface {
	Handle(PatchBooksIDParams) middleware.Responder
}

// NewPatchBooksID creates a new http.Handler for the patch books ID operation
func NewPatchBooksID(ctx *middleware.Context, handler PatchBooksIDHandler) *PatchBooksID {
	return &PatchBooksID{Context: ctx, Handler: handler}
}

/*PatchBooksID swagger:route PATCH /books/{id} patchBooksId

Update book record.

*/
type PatchBooksID struct {
	Context *middleware.Context
	Handler PatchBooksIDHandler
}

func (o *PatchBooksID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchBooksIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchBooksIDBody patch books ID body
// swagger:model PatchBooksIDBody
type PatchBooksIDBody struct {

	// rating
	Rating string `json:"rating,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this patch books ID body
func (o *PatchBooksIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchBooksIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchBooksIDBody) UnmarshalBinary(b []byte) error {
	var res PatchBooksIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
